#!/bin/bash

# Copyright (C) 2015  Marco Manfrini, PhD

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


### Data cleanup script as descripted in GATK pipeline ###

# Pre-Processing

# The data generated by the sequencers are put through some pre-processing steps to make it suitable for variant calling analysis. 
# The steps involved are: Mapping and Marking Duplicates; Local Realignment Around Indels; and Base Quality Score Recalibration (BQSR); performed in that order.

# Mapping and Marking Duplicates
# The sequence reads are first mapped to the reference using BWA mem to produce a file in SAM/BAM format sorted by coordinate. The next step is to mark duplicates. 
# The rationale here is that during the seq uencing process, the same DNA molecules can be sequenced several times. The resulting duplicate reads are not informative 
# and should not be counted as additional evidence for or against a putative variant. 
# The duplicate marking process identifies these reads as such so that the GATK tools know they should ignore them.
 

# Realignment Around Indels
# Next, local realignment is performed around indels, because the algorithms that are used in the initial mapping step tend to produce various types of artifacts. 
# For example, reads that align on the edges  of indels often get mapped with mismatching bases that might look like evidence for SNPs, but are actually mapping artifacts. 
# The realignment process identifies the most consistent placement of the read# s relative to the indel in order to clean up these artifacts. 
# It occurs in two steps: first the program identifies intervals that need to be realigned, then in the second step it determines the optimal consensus sequence and 
# performs the actual realignment of reads.


# Base Quality Score Recalibration
# Finally, base quality scores are recalibrated, because the variant calling algorithms rely heavily on the quality scores assigned to the individual base calls in each sequence read. 
# These scores are per-base estimates of error emitted by the sequencing machines. Unfortunately the scores produced by the machines are subject to various sources of systematic error, 
# leading to over- or under-estimated base quality scores in the data. Base quality score recalibration is a process in which we apply machine learning to model these errors empirically 
# and adjust the quality scores accordingly. This yields more accurate base qualities, which in turn improves the accuracy of the variant calls. The base recalibration process involves 
# two key steps: first the program builds a model of covariation based on the data# and a set of known variants, then it adjusts the base quality scores in the data based on the model.


# USAGE: bash data_cleanup.sh BASEDIR TARGET_REGIONS_KIT
# TARGET_REGIONS_KIT must be either "truseq" or "nextera"

####################

# START SCRIPT

####################

if [ "$#" -ne 2 ]; then
    echo "Illegal number of parameters"
    echo "Usage: bash data_cleanup.sh BASEDIR TARGET_REGIONS_KIT"
    exit 1
fi

# assign BED file with targeted regions
if [ $2 = "truseq" ]; then
	exome_targeted_regions=truseq-exome-targeted-regions-manifest-v1-2_edited.bed
elif [ $2 = "nextera" ]; then
	exome_targeted_regions=nexterarapidcapture_expandedexome_targetedregions_fixed.bed
else
	echo "No targeted regions file provided"
	echo "Type <truseq> or <nextera> as second argument"
	exit 1
fi

echo "basedir: $1"
echo "Exome targeted regions file is $exome_targeted_regions"

# Dirs and files
basedir=$1
inpath=$basedir/Analysis/fastq
outpath=$basedir/Analysis/Data-cleanup
refpath=~/reference

reference=human_g1k_v37.fasta
goldIndels=Mills_and_1000G_gold_standard.indels.b37.vcf

dbsnp=dbsnp_138.b37.vcf

# Software

BWAPATH=~/tools/bwa-0.7.12
ADAPTERREMOVAL=~/tools
FASTQCPATH=~/tools/FastQC
PICARDPATH=~/tools/picard-tools-1.119
GATKTK=~/tools/GenomeAnalysisTK-3.4-0


# Redirecting

exec 2> $outpath/Logs/err_log.txt

# Clearing dirs before running analysis
#rm $inpath/*.zip $inpath/*.html
#rm $outpath/Trimmed/*.zip $outpath/Trimmed/*.html
#rm $outpath/Marked/*.bai

echo "------------------------------------------\n"
echo "--                                      --\n"
echo "-- Starting analysis                    --\n"
echo "--                                      --\n"
echo "------------------------------------------\n"

####################
# BWA INDEX CREATION
#
# Run it once
####################

#$BWAPATH/bwa index $refpath/human_g1k_v37.fasta

####################

# FastQC

####################

echo "------------------------------------------\n"
echo "--                                      --\n"
echo "-- FastQC on raw data                   --\n"
echo "--                                      --\n"
echo "------------------------------------------\n"

# Samples file list

ls $inpath | grep -E .fastq$ > $outpath/samplesList

while read fastqFile; do
    echo $fastqFile
    $FASTQCPATH/fastqc -o $inpath $inpath/$fastqFile
done <$outpath/samplesList

####################

# Trimming adapters

####################

echo "------------------------------------------\n"
echo "--                                      --\n"
echo "-- Trimming adapters                    --\n"
echo "--                                      --\n"
echo "------------------------------------------\n"

PCR1=AATGATACGGCGACCACCGAGATCTACACTCGTCGGCAGCGTC
PCR2=CCGAGCCCACGAGACATCTCGTATGCCGTCTTCTGCTTG


k=0
while read line; do
    fastqFiles+=($line)
    ((k++))
done < $outpath/samplesList

for (( c=0; c<$k; c++ )); do

    if (( $c % 2 == 0 )) ; then

	echo ${fastqFiles[c]}
	echo ${fastqFiles[c+1]}

	$ADAPTERREMOVAL/AdapterRemoval --file1 $inpath/${fastqFiles[c]} --file2 $inpath/${fastqFiles[c+1]} --pcr1 $PCR1 --pcr2 $PCR2 --stats --trimns --trimqualities --minquality 20 --minlength 80 --output1 $outpath/Trimmed/${fastqFiles[c]} --output2 $outpath/Trimmed/${fastqFiles[c+1]} --discarded $outpath/Logs/discarded.out --outputstats $outpath/Logs/stats.out --singleton $outpath/Logs/singleton.out

    fi

done

####################

# FastQC

####################

echo "------------------------------------------\n"
echo "--                                      --\n"
echo "-- FastQC on trimmed reads              --\n"
echo "--                                      --\n"
echo "------------------------------------------\n"

# Samples file list

ls $outpath/Trimmed | grep -E .fastq$ > $outpath/samplesList

while read fastqFile; do
    echo $fastqFile
    $FASTQCPATH/fastqc -o $outpath/Trimmed $outpath/Trimmed/$fastqFile
done <$outpath/samplesList

####################

# Map to reference - BWA mem

####################

echo "------------------------------------------\n"
echo "--                                      --\n"
echo "-- BWA mapping                          --\n"
echo "--                                      --\n"
echo "------------------------------------------\n"

unset fastqFiles

k=0
while read line; do
    fastqFiles+=($line)
    ((k++))
done < $outpath/samplesList

for (( c=0; c<$k; c++ )); do

    if (( $c % 2 == 0 )) ; then

        echo ${fastqFiles[c]}
        echo ${fastqFiles[c+1]}
    
        if [ $2 = "truseq" ]; then
    
            RG=@RG\\tID:${fastqFiles[c]}\\tSM:${fastqFiles[c]}\\tPL:illumina\\tLB:WES-Truseq\\tPU:PE
    
        else [ $2 = "nextera" ]
	  
	          RG=@RG\\tID:${fastqFiles[c]}\\tSM:${fastqFiles[c]}\\tPL:illumina\\tLB:WES-Nextera-Rapid-Capture\\tPU:PE
        
        fi
        
        echo -e $RG
        $BWAPATH/bwa mem -t 20 -M -R $RG  $refpath/$reference $outpath/Trimmed/${fastqFiles[c]} $outpath/Trimmed/${fastqFiles[c+1]} > $outpath/Aligned/${fastqFiles[c]}_${fastqFiles[c+1]}_aligned.sam  

    fi
		
done

####################

# Sort and Mark duplicates - Picard

####################

echo "------------------------------------------\n"
echo "--                                      --\n"
echo "-- Sort BAM - Picard                    --\n"
echo "--                                      --\n"
echo "------------------------------------------\n"

# Sort

ls $outpath/Aligned > $outpath/samplesList

unset fastqFiles

k=0
while read line; do
    fastqFiles+=($line)
    ((k++))
    
done < $outpath/samplesList

for (( c=0; c<$k; c++ )); do
    
    echo ${fastqFiles[c]}
	    
    java -jar $PICARDPATH/SortSam.jar INPUT=$outpath/Aligned/${fastqFiles[c]} OUTPUT=$outpath/Sorted/${fastqFiles[c]}.bam SORT_ORDER=coordinate

done

# Mark duplicates

echo "------------------------------------------\n"
echo "--                                      --\n"
echo "-- Mark duplicates - Picard             --\n"
echo "--                                      --\n"
echo "------------------------------------------\n"

ls $outpath/Sorted > $outpath/samplesList

unset fastqFiles

k=0
while read line; do
    fastqFiles+=($line)
    ((k++))
done < $outpath/samplesList

for (( c=0; c<$k; c++ )); do
    
    echo ${fastqFiles[c]}
	    
    java -jar $PICARDPATH/MarkDuplicates.jar INPUT=$outpath/Sorted/${fastqFiles[c]} OUTPUT=$outpath/Marked/${fastqFiles[c]} METRICS_FILE=metrix.txt
	
done

# Indexing

echo "------------------------------------------\n"
echo "--                                      --\n"
echo "-- BAM Indexing - Picard                --\n"
echo "--                                      --\n"
echo "------------------------------------------\n"


for (( c=0; c<$k; c++ )); do
    
    echo ${fastqFiles[c]}
	    
    java -jar $PICARDPATH/BuildBamIndex.jar INPUT=$outpath/Marked/${fastqFiles[c]}

done
 

####################

# Indel realignment

####################

echo "------------------------------------------\n"
echo "--                                      --\n"
echo "-- Indel realignment - Traget intervals --\n"
echo "--                                      --\n"
echo "------------------------------------------\n"

ls -l $outpath/Marked | awk '{print $9}' | grep -E .bam > $outpath/samplesList

unset fastqFiles

k=0
while read line; do
        fastqFiles+=($line)
        ((k++)) 
done < $outpath/samplesList

# Target intervals

for (( c=0; c<$k; c++ )); do
    
    echo ${fastqFiles[c]}
    
    java -jar $GATKTK/GenomeAnalysisTK.jar -T RealignerTargetCreator -nt 2 -R $refpath/$reference -I $outpath/Marked/${fastqFiles[c]} -L $refpath/$exome_targeted_regions -ip 50 -known $refpath/$goldIndels -o $outpath/IndelRealigned/target_intervals.list

done

# Realignment

echo "------------------------------------------\n"
echo "--                                      --\n"
echo "-- Indel realignment - Realignment      --\n"
echo "--                                      --\n"
echo "------------------------------------------\n"


for (( c=0; c<$k; c++ )); do
    
    echo ${fastqFiles[c]}
	    
    java -jar $GATKTK/GenomeAnalysisTK.jar -T IndelRealigner -R $refpath/$reference -I $outpath/Marked/${fastqFiles[c]} -targetIntervals $outpath/IndelRealigned/target_intervals.list -known $refpath/$goldIndels -o $outpath/IndelRealigned/${fastqFiles[c]}

done

####################

# Recalibrate base quality scores = run BQSR

####################

echo "------------------------------------------\n"
echo "--                                      --\n"
echo "-- Recalibration                        --\n"
echo "--                                      --\n"
echo "------------------------------------------\n"


ls -l $outpath/IndelRealigned | awk '{print $9}' | grep -E .bam > $outpath/samplesList

unset fastqFiles

k=0
while read line; do
    fastqFiles+=($line)
    ((k++)) 
done < $outpath/samplesList

# Analyze patterns of covariation in the sequence dataset

echo "Analyzing pattern of covariation..\n"

for (( c=0; c<$k; c++ )); do
    
    echo ${fastqFiles[c]}
	    
    java -jar $GATKTK/GenomeAnalysisTK.jar -T BaseRecalibrator -nct 2 -R $refpath/$reference -I $outpath/IndelRealigned/${fastqFiles[c]} -L $refpath/$exome_targeted_regions -ip 50 -knownSites $refpath/$dbsnp -knownSites $refpath/$goldIndels -o $outpath/BQSR/recal_data.table

done

# Apply the recalibration

echo "Apply recalilbration..\n"

for (( c=0; c<$k; c++ )); do
    
    echo ${fastqFiles[c]}
	    
    java -jar $GATKTK/GenomeAnalysisTK.jar -T PrintReads -nct 2 -R $refpath/$reference -I $outpath/IndelRealigned/${fastqFiles[c]} -BQSR $outpath/BQSR/recal_data.table -o $outpath/BQSR/${fastqFiles[c]}

done


####################

echo "------------------------------------------\n"
echo "--                                      --\n"
echo "-- Analysis done. See log file          --\n"
echo "-- for details.                         --\n"
echo "--                                      --\n"
echo "------------------------------------------\n"


# END SCRIPT
